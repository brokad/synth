(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{134:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/schema_overview-a671cd84cab723994cad92ec6fd2b3d3.png"},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),o=(t(0),t(92)),i={id:"schema",title:"Schema"},c={unversionedId:"schema",id:"schema",isDocsHomePage:!1,title:"Schema",description:"The schema is the core data structure that you need to understand to become a Synth wizard.",source:"@site/docs/schema.md",slug:"/schema",permalink:"/synth/schema",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/schema.md",version:"current",sidebar:"docsSidebar",previous:{title:"Core Concepts",permalink:"/synth/core-concepts"},next:{title:"Synth CLI",permalink:"/synth/command-line"}},l=[{value:"JSON",id:"json",children:[]},{value:"Synth Content Nodes",id:"synth-content-nodes",children:[]},{value:"Writing Synth Schemas",id:"writing-synth-schemas",children:[]},{value:"An example Schema",id:"an-example-schema",children:[]}],s={toc:l};function p(e){var n=e.components,i=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,i,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"schema")," is the core data structure that you need to understand to become a Synth wizard."),Object(o.b)("p",null,"It's a little involved, so let's start with a simpler example, JSON!"),Object(o.b)("h3",{id:"json"},"JSON"),Object(o.b)("p",null,"If you've never actually seen how JSON is implemented under the hood, you may find this interesting."),Object(o.b)("p",null,"One of the reasons for JSON's popularity is just how simple of a data structure it is. JSON is a recursive data structure (just a tree but let's pretend we're smart) and can be defined in 8 lines of code:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'enum Value {\n    Null,                       // null\n    Bool(bool),                 // true\n    Number(Number),             // 42\n    String(String),             // "Synth"\n    Array(Vec<Value>),          // [0, true, "a", ...]\n    Object(Map<String, Value>), // { "name" : "Cynthia", "age" : 42 }\n}\n')),Object(o.b)("p",null,"So every node in a JSON tree, is one of 6 variants. Recursion occurs where ",Object(o.b)("inlineCode",{parentName:"p"},"Array"),"s and ",Object(o.b)("inlineCode",{parentName:"p"},"Object"),"s can have children which are also one of 6 variants."),Object(o.b)("p",null,"We've based the Synth schema on the same design. But, what does this look like when you need to capture far more complexity than the JSON schema?"),Object(o.b)("h3",{id:"synth-content-nodes"},"Synth Content Nodes"),Object(o.b)("p",null,"Much like the ",Object(o.b)("inlineCode",{parentName:"p"},"Value")," node in a JSON tree, the ",Object(o.b)("inlineCode",{parentName:"p"},"Content")," nodes in the synth Schema give us the recursive data structure which Synth can use to generate data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},"enum Content {\n    Null,\n    Bool(BoolContent),\n    Number(NumberContent),\n    String(StringContent), // here\n    Array(ArrayContent),\n    Object(ObjectContent),\n    SameAs(SameAsContent),\n    OneOf(OneOfContent),\n}\n")),Object(o.b)("p",null,"Each of these ",Object(o.b)("inlineCode",{parentName:"p"},"Content")," variants, cover a bunch of different types of ",Object(o.b)("inlineCode",{parentName:"p"},"Content")," nodes, just to give an example, the ",Object(o.b)("inlineCode",{parentName:"p"},"StringContent")," variant looks like this under the hood:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},"enum StringContent {\n    Pattern(RegexContent),\n    DateTime(DateTimeContent),\n    Categorical(Categorical<String>),\n    Faker(FakerContent),\n}\n")),Object(o.b)("p",null,"Where ",Object(o.b)("inlineCode",{parentName:"p"},"String")," types can be generated from regular expressions, date time generators and so on. For a comprehensive list see the ",Object(o.b)("a",{parentName:"p",href:"/synth/content/string"},"String")," docs."),Object(o.b)("h3",{id:"writing-synth-schemas"},"Writing Synth Schemas"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Content")," nodes have different fields depending on the type of node. This makes sense, if you are generating ",Object(o.b)("inlineCode",{parentName:"p"},"id"),"s, you're going to want to specify different parameters to if you are generating ",Object(o.b)("inlineCode",{parentName:"p"},"String::DateTime"),"s."),Object(o.b)("p",null,"However, all ",Object(o.b)("inlineCode",{parentName:"p"},"Content")," nodes follow a similar template."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"There is a boolean ",Object(o.b)("inlineCode",{parentName:"li"},"optional")," field, which tells Synth if a field is nullable or not."),Object(o.b)("li",{parentName:"ul"},"Next there is a ",Object(o.b)("inlineCode",{parentName:"li"},"type")," field, which specifies which top-level ",Object(o.b)("inlineCode",{parentName:"li"},"Content")," type the node is (",Object(o.b)("inlineCode",{parentName:"li"},"String"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Number"),", ",Object(o.b)("inlineCode",{parentName:"li"},"Bool")," etc.). Fields can often have a ",Object(o.b)("inlineCode",{parentName:"li"},"subtype")," which disambiguates certain types (for example is a ",Object(o.b)("inlineCode",{parentName:"li"},"Number")," a float ",Object(o.b)("inlineCode",{parentName:"li"},"f64")," or an unsigned integer ",Object(o.b)("inlineCode",{parentName:"li"},"u64"),".)"),Object(o.b)("li",{parentName:"ul"},"Finally, ",Object(o.b)("inlineCode",{parentName:"li"},"Content")," nodes can have 0 or more fields which are specific to that node type. For more information refer to the documentation for that type.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "optional": false,\n  "type": "number",\n  "subtype": "f64",\n  "range": {\n    "low": 274.4,\n    "high": 6597.5,\n    "step": 0.1\n  }\n}\n')),Object(o.b)("h3",{id:"an-example-schema"},"An example Schema"),Object(o.b)("p",null,"In our example schema we have a namespace ",Object(o.b)("inlineCode",{parentName:"p"},"my_app")," which has 2 collections - ",Object(o.b)("inlineCode",{parentName:"p"},"transactions")," and ",Object(o.b)("inlineCode",{parentName:"p"},"users"),"."),Object(o.b)("p",null,"Below is a tree representation of the schema content tree:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"An example schema",src:t(134).default})),Object(o.b)("p",null,"The corresponding namespace can be broken into 2 collections."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"transactions"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "array",\n    "length": {\n        "type": "number",\n        "subtype": "u64",\n        "range": {\n            "low": 1,\n            "high": 6,\n            "step": 1\n        }\n    },\n    "content": {\n        "type": "object",\n        "amount": {\n            "optional": false,\n            "type": "number",\n            "subtype": "f64",\n            "range": {\n                "low": 0,\n                "high": 1000,\n                "step": 0.01\n            }\n        },\n        "currency": {\n            "type": "one_of",\n            "variants": [\n                {\n                    "type": "string",\n                    "pattern": "USD"\n                },\n                {\n                    "type": "string",\n                    "pattern": "GBP"\n                }\n            ]\n        },\n        "timestamp": {\n            "type": "string",\n            "date_time": {\n                "format": "%Y-%m-%dT%H:%M:%S%z",\n                "begin": "2000-01-01T00:00:00+0000",\n                "end": "2020-01-01T00:00:00+0000"\n            }\n        },\n        "user_id": {\n            "type": "same_as",\n            "ref": "users.content.user_id"\n        }\n    }\n}\n')),Object(o.b)("p",null,"And the ",Object(o.b)("inlineCode",{parentName:"p"},"users")," collection:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "array",\n    "length": {\n        "type": "number",\n        "subtype": "u64",\n        "range": {\n            "low": 1,\n            "high": 6,\n            "step": 1\n        }\n    },\n    "content": {\n        "type": "object",\n        "user_id": {\n            "type": "number",\n            "subtype": "u64",\n            "id": {\n                "start_at": 0\n            }\n        },\n        "user_email": {\n            "type": "string",\n            "faker": {\n                "generator": "email"\n            }\n        }\n    }\n}\n')))}p.isMDXComponent=!0},92:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),m=a,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return t?r.a.createElement(d,c(c({ref:n},s),{},{components:t})):r.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);