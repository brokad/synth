(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(98)),o={},l={unversionedId:"content/string",id:"content/string",isDocsHomePage:!1,title:"string",description:"Synth's string generator type regroups many different useful functionalities, from the ability to generate sentences",source:"@site/docs/content/string.md",slug:"/content/string",permalink:"/synth/content/string",editUrl:"https://github.com/openquery-io/synth/edit/master/docs/docs/content/string.md",version:"current",sidebar:"docsSidebar",previous:{title:"number",permalink:"/synth/content/number"},next:{title:"object",permalink:"/synth/content/object"}},c=[{value:"pattern",id:"pattern",children:[]},{value:"faker",id:"faker",children:[]},{value:"date_time",id:"date_time",children:[]},{value:"categorical",id:"categorical",children:[]}],b={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Synth's ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type regroups many different useful functionalities, from the ability to generate sentences\nfrom a regular expression to dates and times, through leveraging ",Object(i.b)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/"},"Faker")," providers to generate valid addresses,\ntelephone numbers, etc."),Object(i.b)("h2",{id:"pattern"},"pattern"),Object(i.b)("p",null,"String values generated by a specified regular expression in the ",Object(i.b)("inlineCode",{parentName:"p"},"pattern")," key."),Object(i.b)("h4",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{        \n  "type": "string",\n  "pattern": "I am a (man|woman) with [2-9] friends"\n}\n')),Object(i.b)("h2",{id:"faker"},"faker"),Object(i.b)("p",null,"Synth integrates with the Python ",Object(i.b)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/"},"Faker library"),". To generate a string using ",Object(i.b)("inlineCode",{parentName:"p"},"Faker"),", use the ",Object(i.b)("inlineCode",{parentName:"p"},'"faker": {...}'),"\nkey/value pair. The value of the ",Object(i.b)("inlineCode",{parentName:"p"},"faker")," key must be an object with at least a ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," key."),Object(i.b)("h4",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "faker": {\n    "generator": "sentence"\n  }\n}\n')),Object(i.b)("p",null,"Faker offers a variety of different fake data, in different locales and can be leveraged easily from Synth schemas using\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," key. Any of the Faker ",Object(i.b)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/providers.html"},"standard providers"),"\ngenerating a string can be used in a Synth schema. The example given below generates fake credit card numbers using\nthe ",Object(i.b)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/providers/faker.providers.credit_card.html#faker.providers.credit_card.Provider.credit_card_number"},Object(i.b)("inlineCode",{parentName:"a"},"credit_card_number")),"\nprovider."),Object(i.b)("p",null,"Some Faker providers allow for parameters to customize the generated data. These parameters can be specified alongside\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," field as arbitrary key/value pairs. In the example below, we used ",Object(i.b)("inlineCode",{parentName:"p"},'"card_type" : "amex"'),"."),Object(i.b)("p",null,"Locales can be specified using the ",Object(i.b)("em",{parentName:"p"},"optional")," ",Object(i.b)("inlineCode",{parentName:"p"},"locales")," key. Allowed values are the same as locales specified\nin ",Object(i.b)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/locales.html"},"Faker's locales documentation"),". In the example below, we\nuse ",Object(i.b)("inlineCode",{parentName:"p"},'"locales": ["en_GB"]'),". Multiple locales can be specified and Synth will sample at random among them."),Object(i.b)("h4",{id:"example-2"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "faker": {\n    "generator": "credit_card_number",\n    "card_type": "amex",\n    "locales": ["en_GB"]\n  }\n}\n')),Object(i.b)("h2",{id:"date_time"},"date_time"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"date_time")," is a variant of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type that generates values from a specified range of ",Object(i.b)("inlineCode",{parentName:"p"},"date_time"),"\nvalues. This lets you, for example, generate valid days of the year for an ",Object(i.b)("inlineCode",{parentName:"p"},"updated_at")," column or a\nvalid ",Object(i.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc2822"},"RFC 2822")," timestamp for an email header field, among others."),Object(i.b)("p",null,"You can specify a string as a ",Object(i.b)("inlineCode",{parentName:"p"},"date_time")," by using the ",Object(i.b)("inlineCode",{parentName:"p"},'"date_time": {...}')," key/value pair."),Object(i.b)("h4",{id:"example-3"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "date_time": {\n    "format": "%Y-%m-%d",\n    "subtype": "naive_date",\n    "begin": "2020-01-01",\n    "end": "2025-01-01"\n  }\n}\n')),Object(i.b)("p",null,"Accepted values for the ",Object(i.b)("inlineCode",{parentName:"p"},'"date_time"')," key are objects with the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"format"'),": a ",Object(i.b)("a",{parentName:"li",href:"https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html"},"strftime"),"-style parameter specifying\nthe string formatting of the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time"),"\nvalue."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"subtype"'),": one of the following",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_date"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a simple ",Object(i.b)("inlineCode",{parentName:"li"},"date")," without timezone specification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a simple ",Object(i.b)("inlineCode",{parentName:"li"},"time")," without timezone specification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_date_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a combined ",Object(i.b)("inlineCode",{parentName:"li"},"date")," and ",Object(i.b)("inlineCode",{parentName:"li"},"time")," without timezone\nspecification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"date_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a combined ",Object(i.b)("inlineCode",{parentName:"li"},"date")," and ",Object(i.b)("inlineCode",{parentName:"li"},"time")," ",Object(i.b)("em",{parentName:"li"},"with")," timezone\nspecification."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"begin"')," and ",Object(i.b)("inlineCode",{parentName:"li"},'"end"'),": the lower and upper bounds of the ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value to generate. The formatting of these values\nmust adhere to the ",Object(i.b)("inlineCode",{parentName:"li"},"strftime"),"-string specified in the ",Object(i.b)("inlineCode",{parentName:"li"},'"format"')," field.")),Object(i.b)("h4",{id:"example-4"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "date_time": {\n    "format": "%Y-%m-%dT%H:%M:%S",\n    "subtype": "naive_date_time",\n    "begin": "2015-01-01T00:00:00",\n    "end": "2020-01-01T12:00:00"\n  }\n}\n')),Object(i.b)("h2",{id:"categorical"},"categorical"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"categorical")," is a variant of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type that generates values from a finite set of user-defined\nvalues. You can specify a string as a categorical by using the ",Object(i.b)("inlineCode",{parentName:"p"},'"categorical": {...}')," key/value pair."),Object(i.b)("h4",{id:"example-5"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "categorical": {\n    "pawn": 8,\n    "rook": 2,\n    "knight": 2,\n    "bishop": 2,\n    "queen": 1,\n    "king": 1\n  }\n}\n')),Object(i.b)("p",null,"The value of the ",Object(i.b)("inlineCode",{parentName:"p"},'"categorical"')," key must be an object whose:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"keys are the allowed values of the categorical (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'"pawn"'),", ",Object(i.b)("inlineCode",{parentName:"li"},'"rook"'),", etc.),"),Object(i.b)("li",{parentName:"ul"},"values are non-negative integers defining the relative weight of the corresponding variant (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"2"),", etc.).")))}p.isMDXComponent=!0},98:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,u=s["".concat(o,".").concat(m)]||s[m]||d[m]||i;return n?r.a.createElement(u,l(l({ref:t},b),{},{components:n})):r.a.createElement(u,l({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);